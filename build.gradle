//TODO clean up and document 

buildscript {
    repositories {
    	maven { url = "https://jcenter.bintray.com/" }
        maven { url = "https://repo1.maven.org/maven2/" }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'com.anatawa12.forge:ForgeGradle:1.2-1.0.+'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
}

sourceCompatibility = 1.5
targetCompatibility = 1.5

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

apply plugin: 'java'
apply plugin: 'forge'

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

version = config.mod_version
group = config.mod_group
archivesBaseName = config.mod_basename

def build_release = System.getenv("BUILD_RELEASE") == "true"

if (!build_release) {
    version += "-SNAPSHOT"
}

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"
}

// creates a timestamp to be appended to the end of the build; a simple way to keep track of dev
// builds and not intended to be the end-all be-all; rather, a temporary solution
def getTimestampSuffix() {
	   def date = new Date()
       return date.format('yyyy-MM-dd_HH-mm-ss')
}

//version = "${config.mod_version}-${getTimestampSuffix()}"

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        exclude 'version.properties'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        // exclude 'mcmod.info'
        exclude '**/mcmod.info'
        exclude '**/version.properties'
    }
    
    rename '(.+_at.cfg)', 'META-INF/$1'
}

tasks.withType(JavaCompile) {

    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    options.encoding = "UTF-8"

    //used to satisfy certain dumb issues, TODO: document
	if (config.JDK6LOC != null && config.JDK6LOC != "" && config.JDK6LOC != [:]) {
	
	    logger.warn('Building {} with Java 6 bootstrap classpath ({})!', name , config.JDK6LOC)
		// TODO FIX THIS FOR NON-MAC OS JAVA 1.6
				             
		// options.bootClasspath = "$JDK6LOC/jre/lib/rt.jar"
		// CompileOptions.setBootstrapClasspath = config.JDK6LOC + "/jre/lib/rt.jar" 
		// options.bootstrapClasspath = config.JDK6LOC + "/jre/lib/rt.jar" 
		// options.bootstrapClasspath = files(config.JDK6LOC + "/lib/jsse.jar", config.JDK6LOC + "/jre/lib/rt.jar")
		options.bootstrapClasspath = files(config.JDK6LOC + "/Classes/classes.jar", 
		config.JDK6LOC + "/Classes/jsse.jar", 
		config.JDK6LOC + "/Classes/alt-rt.jar", 
		config.JDK6LOC + "/Classes/jce.jar")
	}
}

// properties that instruct gradle on how to create the .jar outputs
jar {
	// create a version plate for the beginning of the mod name to avoid confusion as to which
	// version of minecraft/forge this build was for; at some point in the future would like to 
	// expand this to create multiple builds as necessary for different Minecraft/Forge versions
	
	//baseName = "[${config.minecraft_version}-${config.forge_version}] ${config.mod_basename}"
	//${config.mod_version}-${getTimestampSuffix()}
	
	baseName = "${config.mod_basename}"
	//appendix = 'universal'
	
	// don't put in the version.properties file if it exists, and definitely leave out the MCP 
	// (i.e. Minecraft) sources
	exclude 'mcp'
	exclude 'version.properties'
	
	manifest {
        attributes 'FMLAT': 'iDiamondhunterMoreBows_at.cfg' 
        //attributes 'FMLAT': 'transformers.cfg' 
    }
	
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from "build/docs/javadoc"
    classifier "javadoc"
}

task sourceJar(type: Jar, dependsOn: 'sourceMainJava') {
    //from sourceSets.main.allSource
    from "build/sources/java"
    from "build/resources/main/java"
    classifier "sources"
}

//task deobfJar(type: Jar, dependsOn: 'jar') {
    //from "build/source/main"
    //classifier "dev"
//}

task deobfJar(type: Jar) {

    from sourceSets.main.output

    classifier = 'dev'

}

artifacts {
    archives javadocJar 
    archives sourceJar
    archives deobfJar
}

// instructions to gradle on which source to use
sourceSets {
    main {
	    java {
	        srcDir '${config.mod_basename} mod src/main/java' exclude('net/minecraft/**')
	    }
        resources {
            srcDir '${config.mod_basename} mod src/main/resources' include('assets/**','*.cfg','*.png','*.mcmeta','*.info')
        }
    }
}

//TODO add the rest of the artifacts
publishing {
    publications {
        mavenObfsMod(MavenPublication) {
			artifact(file("${project.buildDir}/libs/${config.mod_basename}-${version}.jar")) {
			builtBy build
			}
        }
    }
}
