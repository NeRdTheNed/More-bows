buildscript {
    repositories {
        maven { url = "https://jcenter.bintray.com/" }
        maven { url = "https://repo1.maven.org/maven2/" }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'com.anatawa12.forge:ForgeGradle:1.2-1.0.+'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
}

// Reproducible builds! https://docs.gradle.org/4.9/userguide/working_with_files.html#sec:reproducible_archives
tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

// Building for Java 6 should speed up class loading times a tiny amount, due to preverifying classes.
sourceCompatibility = 1.5
targetCompatibility = 1.6

apply plugin: 'java'
apply plugin: 'forge'

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

version = project.mod_version
group = project.mod_group

def modName = project.mod_name
def build_release = System.getenv("BUILD_RELEASE") == "true"

// Add snapshot suffix to version if not building a release.
// To build a release, set the environment variable BUILD_RELEASE to true.
if (!build_release) {
    version += "-SNAPSHOT"
}

// Information for ForgeGradle to configure the Minecraft / Forge version.
minecraft {
    version = project.minecraft_version + "-" + project.forge_version
    runDir = "run"
}

processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "modName", project.mod_name

    // Replace values in only mcmod.info.
    filesMatching('mcmod.info') {
        expand 'version': version, 'modName': modName, 'mcversion': project.minecraft.version
    }

    // Here's a super unnecessary micro-optimisation: a mcmod.info file is a JSON file, and JSON files can be minified!
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/mcmod.info").each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

// Ensures that the encoding of source files is set to UTF-8, see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// This task creates a .jar file containing the javadoc for the code of this mod.
task javadocJar(type: Jar, dependsOn: 'javadoc') {
    classifier "javadoc"
    from javadoc.outputs
}

// This task creates a .jar file containing the source code of this mod.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

// This task creates a .jar file containing a deobfuscated version of this mod, for other developers to use in a development environment.
task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
}

// Creates the listed artifacts on building the mod.
artifacts {
    archives javadocJar
    archives sourcesJar
    archives devJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(jar) {
                builtBy build
            }
            artifact(sourcesJar) {
                builtBy sourcesJar
            }
            artifact(devJar) {
                builtBy devJar
            }
            artifact(javadocJar) {
                builtBy javadocJar
            }
        }
    }
}
