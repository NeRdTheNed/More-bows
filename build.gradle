buildscript {
    repositories {
        maven { url = "https://jcenter.bintray.com/" }
        maven { url = "https://repo1.maven.org/maven2/" }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'com.anatawa12.forge:ForgeGradle:1.2-1.0.+'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
}

sourceCompatibility = 1.5
targetCompatibility = 1.6 //Building for Java 6 should speed up class loading times, due to preverifying classes.

apply plugin: 'java'
apply plugin: 'forge'

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

version = project.mod_version
group = project.mod_group
archivesBaseName = project.mod_basename

def modName = project.mod_name
def build_release = System.getenv("BUILD_RELEASE") == "true"

if (!build_release) {
    version += ("-SNAPSHOT+" + getTimestampSuffix())
}

minecraft {
    version = project.minecraft_version + "-" + project.forge_version
    runDir = "run"
}

// creates a timestamp to be appended to the end of the build
def getTimestampSuffix() {
       def date = new Date()
       return date.format('yyyy-MM-dd_HHmmss')
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // Replace values in only mcmod.info.
    filesMatching('mcmod.info') {
        // Replace version and mcversion.
        expand 'version':version, 'mcversion':project.minecraft.version, 'modName':modName, 'archivesBaseName':archivesBaseName
    }

    rename '(.+_at.cfg)', 'META-INF/$1'

    // Here's a hilarious micro-optimisation for you!
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/mcmod.info").each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

task processSource(type: Sync) { // TODO: Remove this
    from(sourceSets.main.java) {
        // only process this file
        filesMatching('iDiamondhunter/morebowsmod/MoreBowsMod.java') {
            // replace build variables
            expand 'version':version, 'mcversion':project.minecraft.version, 'modName':modName, 'archivesBaseName':archivesBaseName
        }
    }
    into "$buildDir/src"
}

tasks.withType(JavaCompile) {

    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    options.encoding = "UTF-8"

    //TODO: replace with gradle 6.7's new features, will be remove from this script soon
    /* if (project.JDK6LOC != null && project.JDK6LOC != "" && project.JDK6LOC != [:]) {

        logger.warn('Building {} with Java 6 bootstrap classpath ({})!', name , project.JDK6LOC)
        // TODO FIX THIS FOR NON-MAC OS JAVA 1.6

        // options.bootClasspath = "$JDK6LOC/jre/lib/rt.jar"
        // CompileOptions.setBootstrapClasspath = project.JDK6LOC + "/jre/lib/rt.jar"
        // options.bootstrapClasspath = project.JDK6LOC + "/jre/lib/rt.jar"
        // options.bootstrapClasspath = files(project.JDK6LOC + "/lib/jsse.jar", project.JDK6LOC + "/jre/lib/rt.jar")
        options.bootstrapClasspath = files(project.JDK6LOC + "/Classes/classes.jar",
        project.JDK6LOC + "/Classes/jsse.jar",
        project.JDK6LOC + "/Classes/alt-rt.jar",
        project.JDK6LOC + "/Classes/jce.jar")
    } */
}

compileJava {
    //use the processed source with replaced build variables
    source = processSource.outputs
}

// properties that instruct gradle on how to create the .jar outputs
jar {
    baseName = "${project.mod_basename}"

    // don't put in the version.properties file if it exists, and definitely leave out the MCP
    // (i.e. Minecraft) sources
    exclude 'mcp'
    exclude 'version.properties'

    // add access transformer to manifest
    manifest {
        attributes 'FMLAT': 'iDiamondhunterMoreBows_at.cfg'
    }

}

// This task creates a .jar file containing the javadoc for your project
task javadocJar(type: Jar, dependsOn: 'javadoc') {
    classifier "javadoc"
    from javadoc.outputs
}

// This task creates a .jar file containing the source code of this mod.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    //from processResources.outputs
    from processSource.outputs // TODO: Remove this
}

// This task creates a .jar file containing a deobfuscated version of this mod, for other developers to use in a development environment.
task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
}

// Creates the listed artifacts on building the mod.
artifacts {
    archives javadocJar
    archives sourcesJar
    archives devJar
}

// This block configures any maven publications you want to make.
publishing {
    publications {
        mavenJava(MavenPublication) {
        // Add any other artifacts here that you would like to publish!
            artifact(jar) {
                builtBy build
            }
            artifact(sourcesJar) {
                builtBy sourcesJar
            }
            artifact(devJar) {
                builtBy devJar
            }
            artifact(javadocJar) {
                builtBy javadocJar
            }
        }
    }

    // This block selects the repositories you want to publish to.
    repositories {
        // Add the repositories you want to publish to here.
    }
}
