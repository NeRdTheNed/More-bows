buildscript {
    repositories {
        // uncomment the line below to use a localMaven snapshot.
        // mavenLocal()

        // bad hack to use a local repository in the "libs" folder when building with Github actions.
        // comment this repository out to test with a localMaven snapshot instead.
        maven {
            name = "hack"
            url uri("${projectDir}/libs")
        }
        maven { url = "https://jcenter.bintray.com/" }
        maven { url = "https://repo1.maven.org/maven2/" }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'com.anatawa12.forge:ForgeGradle:1.2-1.0.3-SNAPSHOT'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
}

// more reproducible builds used to verify that compiled code is the same.
// https://docs.gradle.org/4.9/userguide/working_with_files.html#sec:reproducible_archives
tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

apply plugin: 'java'
apply plugin: 'forge'

// To use Java toolchains, sourceCompatibility & targetCompatibility need to be not set.
// ForgeGradle sets these previously to build some Forge internals, as it targets Gradle 4.X and above.
// This workaround sets them back to null. As this is a hack, any issues caused by this are my fault.
sourceCompatibility = null
targetCompatibility = null

// This Java toolchain builds this mod with a Java 6 compatible JDK.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(6)
    }
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

version = project.mod_version
group = project.mod_group
archivesBaseName = project.mod_basename

def modName = project.mod_name
def build_release = System.getenv("BUILD_RELEASE") == "true"

if (!build_release) {
    version += ("-SNAPSHOT") // Snapshot numbers removed due to influencing compiled code. Builds should now be reproducible for testing.
}

minecraft {
    version = project.minecraft_version + "-" + project.forge_version
    runDir = "run"
}

processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "modName", project.mod_name
    inputs.property "archivesBaseName", project.mod_basename

    // Replace values in only mcmod.info.
    filesMatching('mcmod.info') {
        // Replace version and mcversion.
        expand 'version':version, 'mcversion':project.minecraft.version, 'modName':modName, 'archivesBaseName':archivesBaseName
    }

    rename '(.+_at.cfg)', 'META-INF/$1'

    // Here's a hilarious micro-optimisation for you!
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/mcmod.info").each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

task processSource(type: Sync) { // TODO: Remove this, it's a huge hack.
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "modName", project.mod_name
    inputs.property "archivesBaseName", project.mod_basename

    from(sourceSets.main.java) {
        // only process this file
        filesMatching('iDiamondhunter/morebowsmod/MoreBowsMod.java') {
            // replace build variables
            expand 'version':version, 'mcversion':project.minecraft.version, 'modName':modName, 'archivesBaseName':archivesBaseName
        }
    }
    into "$buildDir/src"
}

tasks.withType(JavaCompile) {
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    options.encoding = "UTF-8"
}

compileJava {
    // use the processed source with replaced build variables
    // TODO: Remove this, it's a huge hack.
    source = processSource.outputs
}

jar {
    baseName = "${project.mod_basename}"

    exclude 'mcp'
    exclude 'version.properties'

    // add access transformer to manifest
    manifest {
        attributes 'FMLAT': 'iDiamondhunterMoreBows_at.cfg'
    }

}

// This task creates a .jar file containing the javadoc for your project
task javadocJar(type: Jar, dependsOn: 'javadoc') {
    classifier "javadoc"
    from javadoc.outputs
}

// This task creates a .jar file containing the source code of this mod.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    //from processResources.outputs
    from processSource.outputs // TODO: Remove this
}

// This task creates a .jar file containing a deobfuscated version of this mod, for other developers to use in a development environment.
task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
}

// Creates the listed artifacts on building the mod.
artifacts {
    archives javadocJar
    archives sourcesJar
    archives devJar
}

// This block configures any maven publications you want to make.
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(jar) {
                builtBy build
            }
            artifact(sourcesJar) {
                builtBy sourcesJar
            }
            artifact(devJar) {
                builtBy devJar
            }
            artifact(javadocJar) {
                builtBy javadocJar
            }
        }
    }

    // This block selects the repositories you want to publish to.
    repositories {
        // Add the repositories you want to publish to here.
    }
}
